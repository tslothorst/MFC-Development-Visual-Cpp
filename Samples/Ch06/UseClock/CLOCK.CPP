// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "clock.h"

/////////////////////////////////////////////////////////////////////////////
// CClock

IMPLEMENT_DYNCREATE(CClock, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CClock properties

short CClock::GetAlarmHour()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CClock::SetAlarmHour(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

short CClock::GetAlarmMinute()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CClock::SetAlarmMinute(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CClock::GetAlarmType()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CClock::SetAlarmType(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

CString CClock::GetAlarmSound()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CClock::SetAlarmSound(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

CString CClock::GetAlarmCommand()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CClock::SetAlarmCommand(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

BOOL CClock::GetAlarmSet()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CClock::SetAlarmSet(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CClock::Get_AlarmSet()
{
	BOOL result;
	GetProperty(0x0, VT_BOOL, (void*)&result);
	return result;
}

void CClock::Set_AlarmSet(BOOL propVal)
{
	SetProperty(0x0, VT_BOOL, propVal);
}

OLE_COLOR CClock::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CClock::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CClock operations

void CClock::SetAlarmTime(short hour, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hour, nNewValue);
}

void CClock::TestAlarm()
{
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CClock::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
